pipeline {
  agent any
  tools {
	  maven 'MAVEN_3.9.9'
  	  jfrog 'jfrog-cli'
  }
  triggers {
	  pollSCM('* * * * *')
  }	
  stages {
	stage('SCM') {
		  steps {
			git url: 'https://github.com/sivaganesh2312/spring-petclinic-April24.git', branch: 'develop'
		  }
	}
	stage('Build') {
		steps {
			withSonarQubeEnv(credentialsId: 'SONARCLOUD_ID', installationName: 'sonarcloud') { // You can override the credential to be used
				sh 'mvn clean package org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar -D sonar.organization=aug2024 -D sonar.projectKey=61768af1e688e05c2ec7dee782bb80fe84bb966c'			
			}
			    junit testResults: '**/surefire-reports/*.xml'
			    archive '**/target/spring-petclinic-*.jar'
		}
	}
	stage('Exec Maven commands') {
        steps {
            // Configure Maven project's repositories
            jf 'mvn-config --repo-resolve-releases maven123-libs-release --repo-resolve-snapshots maven123-libs-snapshot --repo-deploy-releases-maven123-libs-release-local --repo-deploy-snapshots maven123-libs-snapshot-local'
            // Install and publish project
            jf 'mvn clean install'
        }
    }
	stage('Publish build info') {
    	steps {
        	jf 'rt build-publish'
        }
    }
        
	stage("Quality Gate") {
    	steps {
        	timeout(time: 1, unit: 'HOURS') {
            	// Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                // true = set pipeline to UNSTABLE, false = don't
                waitForQualityGate abortPipeline: true
            }
        }
    }	
  }
    
}